#include "header.h"

/**
 * change_to_space - change delims to spaces.
 * @line: given string.
 */
void change_to_space_p(char *line)
{
	int del, li;
	char delim[] = ":";

	for (del = 0; delim[del] != '\0'; del++)
	{
		for (li = 0; line[li] != '\0'; li++)
			if (delim[del] == line[li])
				line[li] = ' ';
	}
}
/**
 * cwords - count number of words in a given string.
 * @str: given string.
 * @l: lenght of string.
 * Return: number of words.
 */
int cwordsp(char *str, int l)
{
	int i, count_w = 0;

	for (i = 0; i < l; i++)
	{
		if (str[i] != ' ')
		{
			for (; str[i] != ' '; i++)
				;
			count_w++;
		}
	}
	return (count_w);
}

/**
 * split_line - separate the string to a vector of arguments av.
 * @line: pointer to the string.
 * Return: pointer to the new array of string pointers.
 */
char **split_path(char *line)
{
	char **p;
	int count_w = 0, count_c = 0, i, leng, x = 0, fr, j = 0, z = 0;

	if (line == NULL || *line == '\0')
		return (NULL);
	change_to_space_p(line);
	leng = _strlen(line);
	count_w = cwordsp(line, leng);
	p = malloc((count_w + 1) * sizeof(char *));
	if (p == NULL || count_w == 0)
	{
		free(p);
		return (NULL);
	}
	for (i = 0; i < leng; i++)
	{
		if (line[i] != ' ')
		{
			z = 1;
			for (count_c = 0; line[i] != ' ' && line[i] != '\0'; i++)
				count_c++;
			p[x] = malloc((count_c + 1) * sizeof(char));
			if (p[x] == NULL)
			{
				for (fr = 0; fr <= x; fr++)
					free(p[fr]);
				free(p);
				return (NULL);
			}
			for (j = 0; j < count_c; j++)
				p[x][j] = line[(i - count_c) + j];
			p[x][j] = '\0';
			x++;
		}
	}
	if (z != 1)
		return (NULL);
	p[x] = NULL;
	return (p);
}

char *check_path_mod(char *path_val)
{
	int i, j, len;
	char *mod_path = NULL;

	if (path_val[0] == ':')
	{
		free(path_val);
		path_val = malloc(sizeof(char));
		path_val = "";
		return (path_val);
	}
	for (i = 0; path_val[i] != '\0'; i++)
	{
		if (path_val[i] == ':' && path_val[i + 1] == ':')
			break;
	}
	len = _strlen(path_val);
	if (i == len)
		return (path_val);
	mod_path = malloc((len + 2) * sizeof(char));
	for (j = 0; j <= i; j++)
	{
		mod_path[j] = path_val[j];
	}
	mod_path[j] = '.';
	for (j++; j <= len; j++)
	{
		mod_path[j] = path_val[j - 1];
	}
	mod_path[j] = '\0';
	free(path_val);
	return (mod_path);
}

/**
 * path_exp - prints the environment
 * @vect: array of arguments
 * @env: enviromental variables in an array of pointers
 * Return: Always 0.
 */
char **path_exp(char **vect, char **env)
{
	int i;
	char *path_values, *aux_ex, *mix_direx;
	char **tokens;
	struct stat st;

	i = findenv(env, "PATH");
	if (i == -1)
		return (vect);
	if (vect[0][0] == '/' || (vect[0][0] == '.' && vect[0][1] == '/'))
		return (vect);
	path_values = _strdup(_strchr(env[i], '=') + 1);
	path_values = check_path_mod(path_values);
	tokens = split_path(path_values);
	aux_ex = str_concat("/", vect[0]);/*PILAS*/
	for (i = 0; tokens[i]; i++)
	{
		mix_direx = str_concat(tokens[i], aux_ex);
		if (stat(mix_direx, &st) == 0)
		{
			free(vect[0]);
			vect[0] = mix_direx;
			break;
		}
		free(mix_direx);
	}
	free(aux_ex), free(path_values), _freearrp(tokens);
	return (vect);
}
